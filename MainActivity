package com.example.lastproject;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.room.Room;

import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.text.Editable;
import android.text.InputType;
import android.text.method.ScrollingMovementMethod;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

import com.example.lastproject.db.AppDatabase;
import com.example.lastproject.db.UserLogDAO;

import java.util.List;

public class MainActivity extends AppCompatActivity {

    private static final String USER_ID_KEY = "com.example.finalproject.userIdKey";
    private static final String PREFENCES_KEY = "com.example.finalproject.PREFENCES_KEY";

    private TextView mMainDisplay;
    private UserLogDAO mUserLogDAO;
    private Button mAdminButton;
    private Button foodButton;
    private Button tableButton;
    private Button drinkButton;
    private Button serviceButton;



    private List<UserLog> mUserLogs;
    private int mUserId = -1;
    private SharedPreferences mPreferences = null;
    private User mUser;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        getDatabase();
        checkForUser();
        loginUser(mUserId);
        addUserToPreference(mUserId);
        wireUpDisplay();
        adminCheck();
        mMainDisplay.setMovementMethod(new ScrollingMovementMethod());
        refreshDisplay();
        foodButtonPathing();
        drinkButtonPathing();
        serviceButtonPathing();
        tableButtonPathing();
        adminButtonPathing();
        UserLog log = getValuesFromDisplay();
        mUserLogDAO.insert(log);
        refreshDisplay();
    }


    private void wireUpDisplay(){
        mMainDisplay = findViewById(R.id.mainUserLogDisplay);
        mAdminButton = findViewById(R.id.adminButton);
        foodButton = findViewById(R.id.foodButton);
        drinkButton = findViewById(R.id.drinkButton);
        serviceButton = findViewById(R.id.serviceButton);
        tableButton = findViewById(R.id.tableButton);
    }
    private boolean adminCheck() {
        if (mUserId == 2){
            mAdminButton.setVisibility(View.VISIBLE);
            return true;
        }else{
            mAdminButton.setVisibility(View.INVISIBLE);
        }
        return false;
    }

    private void foodButtonPathing(){
        foodButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = FoodMenu.intentFactory(getApplicationContext());
                startActivity(intent);
            }
        });
    }

    private void drinkButtonPathing(){
        drinkButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = DrinkMenu.intentFactory(getApplicationContext());
                startActivity(intent);
            }
        });
    }

    private void adminButtonPathing(){
        mAdminButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = AdminPage.intentFactory(getApplicationContext());
                startActivity(intent);
            }
        });
    }


    private void serviceButtonPathing(){
        serviceButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = ServiceMenu.intentFactory(getApplicationContext());
                startActivity(intent);
            }
        });
    }

    private void tableButtonPathing(){
        tableButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = TableNumber.intentFactory(getApplicationContext());
                startActivity(intent);
            }
        });
    }

    private UserLog getValuesFromDisplay(){
        String name;
       name = mMainDisplay.getText().toString();
        UserLog log = new UserLog(name, mUserId);
        return log;
    }

    private void refreshDisplay(){
        mUserLogs = mUserLogDAO.getUserLogsByUserId(mUserId);

        if(mUserLogs.size() <= 0){
            mMainDisplay.setText(R.string.noLogsMessage);
        }
        StringBuilder sb = new StringBuilder();
        for (UserLog log: mUserLogs) {
            sb.append(log);
            sb.append("\n");
            sb.append("=-=-=-=-=-=-");
            sb.append("\n");
        }
    }

    private void logoutUser() {
        AlertDialog.Builder alertBuilder = new AlertDialog.Builder(this);

        alertBuilder.setMessage(R.string.logout);

        alertBuilder.setPositiveButton(getString(R.string.yes),
                new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        clearUserFromIntent();
                        clearUserFromPref();
                        mUserId = -1;
                        checkForUser();
                    }
                });
        alertBuilder.setNegativeButton(getString(R.string.no),
                new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {


                    }
                });

        alertBuilder.create().show();
    }

    private void loginUser(int userId) {
        mUser = mUserLogDAO.getUserByUserId(userId);
        addUserToPreference(userId);
        invalidateOptionsMenu();
    }

    @Override
    public boolean onPrepareOptionsMenu(Menu menu) {
        if (mUser != null) {
            MenuItem item = menu.findItem(R.id.userMenuLogout);
            item.setTitle(mUser.getUserName());
        }
        return super.onPrepareOptionsMenu(menu);
    }

    private void addUserToPreference(int userId) {
        if (mPreferences == null) {
            getPrefs();
        }
        SharedPreferences.Editor editor = mPreferences.edit();
        editor.putInt(USER_ID_KEY, userId);
        editor.apply();
    }

    private void getDatabase() {
        mUserLogDAO = Room.databaseBuilder(this, AppDatabase.class, AppDatabase.DB_NAME)
                .allowMainThreadQueries()
                .build()
                .getUserLogDAO();
    }

    private void checkForUser() {
        mUserId = getIntent().getIntExtra(USER_ID_KEY, -1);
        //do we have a user in the preferences?
        if (mUserId != -1) {
            return;
        }
        if (mPreferences == null) {
            getPrefs();
        }
        mUserId = mPreferences.getInt(USER_ID_KEY, -1);
        if (mUserId != -1) {
            return;
        }

        //do we have any users at all?
        List<User> users = mUserLogDAO.getAllUsers();
        if (users.size() <= 0) {
            User defaultUser = new User("testuser1", "testuser1");
            User altUser = new User("admin2", "admin2");
            mUserLogDAO.insert(defaultUser,altUser);
        }
        Intent intent = LoginActivity.intentFactory(this);
        startActivity(intent);

    }

    private void getPrefs() {
        mPreferences = this.getSharedPreferences(PREFENCES_KEY, Context.MODE_PRIVATE);
    }

    private void clearUserFromIntent() {
        getIntent().putExtra(USER_ID_KEY, -1);
    }

    private void clearUserFromPref() {
        addUserToPreference(-1);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.user_menu, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
        switch (item.getItemId()) {
            case R.id.userMenuLogout:
                logoutUser();
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }


    public static Intent intentFactory(Context context, int userId) {
        Intent intent = new Intent(context, MainActivity.class);
        intent.putExtra(USER_ID_KEY, userId);

        return intent;
    }

}
